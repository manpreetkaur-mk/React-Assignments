{"ast":null,"code":"var _jsxFileName = \"/Users/manpreetkaur/Documents/factor/React/demo2/src/Temperature.js\";\nimport { React, Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BoilingVerdict(props) {\n  if (typeof props.celsius !== \"undefined\" && props.celsius >= 100) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The water would boil.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  } else if (typeof props.farenheit !== \"undefined\" && props.farenheit >= 37.7) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The water would boil.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"The water would not boil.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 10\n  }, this);\n}\n\n_c = BoilingVerdict;\n\nclass Temperature extends Component {\n  constructor(props) {\n    super(props);\n\n    this.convertTemp = (type, temp) => {\n      if (type === \"temperatureC\") return temp * 9 / 5 + 32;else return (temp - 32) * 5 / 9;\n    };\n\n    this.handleChange = e => {\n      var main_ele = e.target.name;\n      var other_ele = e.target.name === \"temperatureC\" ? \"temperatureF\" : \"temperatureC\";\n      var target_value = e.target.value;\n      this.setState({\n        [main_ele]: target_value,\n        [other_ele]: this.convertTemp(other_ele, target_value)\n      });\n    };\n\n    this.state = {\n      temperatureC: \"\",\n      temperatureF: \"\"\n    };\n  }\n\n  render() {\n    const temperatureC = this.state.temperatureC;\n    const temperatureF = this.state.temperatureF;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Enter temperature in Celsius:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"temperatureC\",\n          value: temperatureC,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n          celsius: parseFloat(temperatureC)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: \"Enter temperature in farenheit:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"temperatureF\",\n          value: temperatureF,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n          farenheit: parseFloat(temperatureF)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Temperature;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoilingVerdict\");","map":{"version":3,"names":["React","Component","BoilingVerdict","props","celsius","farenheit","Temperature","constructor","convertTemp","type","temp","handleChange","e","main_ele","target","name","other_ele","target_value","value","setState","state","temperatureC","temperatureF","render","parseFloat"],"sources":["/Users/manpreetkaur/Documents/factor/React/demo2/src/Temperature.js"],"sourcesContent":["\nimport {React, Component } from \"react\";\n\nfunction BoilingVerdict(props) {\n  if (typeof props.celsius !== \"undefined\" && props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  } else if (typeof props.farenheit !== \"undefined\" && props.farenheit >= 37.7) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n\nclass Temperature extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { temperatureC: \"\", temperatureF: \"\" };\n  }\n\n  convertTemp = (type, temp) => {\n    if (type === \"temperatureC\") return (temp * 9/5) + 32;\n    else return (temp - 32) * 5/9;\n  };\n\n  handleChange = (e) => {\n    var main_ele = e.target.name;\n    var other_ele =\n      e.target.name === \"temperatureC\" ? \"temperatureF\" : \"temperatureC\";\n    var target_value = e.target.value;\n    this.setState({\n      [main_ele]: target_value,\n      [other_ele]: this.convertTemp(other_ele, target_value)\n    });\n  };\n\n  render() {\n    const temperatureC = this.state.temperatureC;\n    const temperatureF = this.state.temperatureF;\n\n    return (\n      <div>\n        <fieldset>\n          <legend>Enter temperature in Celsius:</legend>\n          <input\n            name=\"temperatureC\"\n            value={temperatureC}\n            onChange={this.handleChange}\n          />\n          <BoilingVerdict celsius={parseFloat(temperatureC)} />\n        </fieldset>\n\n        <fieldset>\n          <legend>Enter temperature in farenheit:</legend>\n          <input\n            name=\"temperatureF\"\n            value={temperatureF}\n            onChange={this.handleChange}\n          />\n          <BoilingVerdict farenheit={parseFloat(temperatureF)} />\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nexport default Temperature;"],"mappings":";AACA,SAAQA,KAAR,EAAeC,SAAf,QAAgC,OAAhC;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;EAC7B,IAAI,OAAOA,KAAK,CAACC,OAAb,KAAyB,WAAzB,IAAwCD,KAAK,CAACC,OAAN,IAAiB,GAA7D,EAAkE;IAChE,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD,CAFD,MAEO,IAAI,OAAOD,KAAK,CAACE,SAAb,KAA2B,WAA3B,IAA0CF,KAAK,CAACE,SAAN,IAAmB,IAAjE,EAAuE;IAC5E,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EACD,oBAAO;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AACD;;KAPQH,c;;AAST,MAAMI,WAAN,SAA0BL,SAA1B,CAAoC;EAClCM,WAAW,CAACJ,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAKnBK,WALmB,GAKL,CAACC,IAAD,EAAOC,IAAP,KAAgB;MAC5B,IAAID,IAAI,KAAK,cAAb,EAA6B,OAAQC,IAAI,GAAG,CAAP,GAAS,CAAV,GAAe,EAAtB,CAA7B,KACK,OAAO,CAACA,IAAI,GAAG,EAAR,IAAc,CAAd,GAAgB,CAAvB;IACN,CARkB;;IAAA,KAUnBC,YAVmB,GAUHC,CAAD,IAAO;MACpB,IAAIC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,IAAxB;MACA,IAAIC,SAAS,GACXJ,CAAC,CAACE,MAAF,CAASC,IAAT,KAAkB,cAAlB,GAAmC,cAAnC,GAAoD,cADtD;MAEA,IAAIE,YAAY,GAAGL,CAAC,CAACE,MAAF,CAASI,KAA5B;MACA,KAAKC,QAAL,CAAc;QACZ,CAACN,QAAD,GAAYI,YADA;QAEZ,CAACD,SAAD,GAAa,KAAKR,WAAL,CAAiBQ,SAAjB,EAA4BC,YAA5B;MAFD,CAAd;IAID,CAnBkB;;IAEjB,KAAKG,KAAL,GAAa;MAAEC,YAAY,EAAE,EAAhB;MAAoBC,YAAY,EAAE;IAAlC,CAAb;EACD;;EAkBDC,MAAM,GAAG;IACP,MAAMF,YAAY,GAAG,KAAKD,KAAL,CAAWC,YAAhC;IACA,MAAMC,YAAY,GAAG,KAAKF,KAAL,CAAWE,YAAhC;IAEA,oBACE;MAAA,wBACE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,cADP;UAEE,KAAK,EAAED,YAFT;UAGE,QAAQ,EAAE,KAAKV;QAHjB;UAAA;UAAA;UAAA;QAAA,QAFF,eAOE,QAAC,cAAD;UAAgB,OAAO,EAAEa,UAAU,CAACH,YAAD;QAAnC;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAWE;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UACE,IAAI,EAAC,cADP;UAEE,KAAK,EAAEC,YAFT;UAGE,QAAQ,EAAE,KAAKX;QAHjB;UAAA;UAAA;UAAA;QAAA,QAFF,eAOE,QAAC,cAAD;UAAgB,SAAS,EAAEa,UAAU,CAACF,YAAD;QAArC;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA,QAXF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAuBD;;AAjDiC;;AAoDpC,eAAehB,WAAf"},"metadata":{},"sourceType":"module"}